#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>



typedef struct Machine Machine;
typedef struct Job Job ;
typedef struct Horaire Horaire ;
typedef struct Element Element;
typedef Element* llist;
typedef struct Liste Liste;

const int j = 5; // nombre de jobs
const int m = 1; // nombre de machine

struct Machine {
    int id;
    float Si; //Début
    float Ti; //Fin

    /** Entre Si et Ti on ne peut rien faire **/
};

struct Job {
    int id;
    float* duree;
    float ci  ; //date de fin;
};

struct Horaire{
    float debut;
    float fin;
    int id;
    bool attente;
};



struct Element
{
    int nombre;
    Element *suivant;
};


struct Liste
{
    Element *premier;
    Element *dernier;
};







/**
 * @brief affichage
 * @param jobs
 * @param machines
 * @param n_j nombre de jobs
 * @param n_m nombre de machines
 */
void affichage(Job* jobs, Machine* machines, int n_j, int n_m){
    int i, j ;

    printf("****affichage ******\n");

    for (i = 0 ; i < n_j ; i++){  // affichage jobs
        Job jo = jobs[i];

        printf("job : id = %d , duree = [ ", jo.id);
        for(j = 0 ; j < n_m ; j++){ // affichage durée
            printf("%.1f, ",jo.duree[j]);
        }
        printf("] \n");
    }

    for (i = 0 ; i < n_m ; i++){  // affichage machines
        Machine machine = machines[i];
        printf("machine id = %d, Si = %f, Ti = %f \n", machine.id, machine.Si, machine.Ti);

    }

    printf("**********\n");
}


int count(void **tab)
{
      int i;

     for (i = 0; tab[i]; i++)
            ;
     return (i);
}

void affichageTableauOrdonnance(Horaire** tab, int job, int machine, Machine* machines){
    int i, j ;
    printf("****affichage tableau ******\n");
    for (i = 0 ; i < machine ; i++){
        Machine m = machines[i];
        printf("Machine : id = %d \n", m.id);
        for(j = 0 ; j < count(tab[i]); j++){
            Horaire horaire = tab[i][j];
            if(horaire.attente)
                printf("Horaire de %f à %f en attente \n",horaire.debut,horaire.fin);
            else
                printf("Travail sur l'Horaire de %f à %f sur le job %d \n",horaire.debut,horaire.fin,horaire.id);
        }
        printf("\n");
    }


}



/**
 * @brief f fonction objective
 * @param jobs tableau des jobs
 * @param i nombre de jobs
 * @return
 */
int f(Job* jobs, int i){

    int res = 0, j;

    for(j=0; j < i ; j++){
        res+= jobs[j].ci;
    }
    return res ;
}






int ordre_decroissant (Job* job, int min, int size, int machine){

    int tmp = min, i, j ;

    for(i = min ; i < size ; i++){
       // printf("test = %.1f\n", job[i].duree[0]);
        if (job[tmp].duree[machine] < job[i].duree[ machine])
            tmp = i;
    }

    return tmp ;
}

int ordre_croissant (Job* job, int min, int size, int machine){

    int tmp = min, i ;
    for(i = min ; i < size ; i++){
       // printf("test = %.1f\n", job[i].duree[0]);
        if (job[tmp].duree[machine] > job[i].duree[ machine])
            tmp = i;
    }
    return tmp ;
}

int nombre_element_tableau(float* tab){
    int i = 0;
    int resultat = 0, job =0;
    for(i = 0; i < 5; i++){
        if(tab[i] != 0) resultat ++;
    }
    return resultat;
}

int cinq0_tableau(float* tab){
    int i = 0;
    int resultat = 0, job =0;
    for(i = 0; i < 5; i++){
        if(tab[i] == 0) resultat ++;
    }
    return resultat;
}

Liste *initialisation()
{
    Liste *liste = malloc(sizeof(*liste));
    Element *element = malloc(sizeof(*element));
    if (liste == NULL || element == NULL)
    {
        exit(EXIT_FAILURE);
    }
    element->nombre = NULL;
    element->suivant = NULL;
    liste->premier = NULL;
    return liste;
}

void afficherListe(Liste *liste)
{
    if (liste == NULL)
    {
        exit(EXIT_FAILURE);
    }
    Element *actuel = liste->premier;
    while (actuel != NULL)
    {
        printf("%d -> ", actuel->nombre);
        actuel = actuel->suivant;
    }
    printf("NULL\n");
}

void insertion(Liste *liste, int nvNombre)
{
    Element *nouveau = malloc(sizeof(*nouveau));
    if (liste == NULL || nouveau == NULL)
    {
        exit(EXIT_FAILURE);
    }
    nouveau->nombre = nvNombre;
    nouveau->suivant = liste->premier;
    liste->premier = nouveau;
}

void suppression(Liste *liste)
{
    if (liste == NULL)
    {
        exit(EXIT_FAILURE);
    }

    if (liste->premier != NULL)
    {
        Element *aSupprimer = liste->premier;
        liste->premier = liste->premier->suivant;
        free(aSupprimer);
    }
}


/**
 * @brief heuristique_NEH
 * Il s'agit d'un algorithme constructif qui sélectionne le job le plus long parmi les jobs non encore placés et essaie de l’insérer dans toutes
 *les  positions  possibles  de  la  séquence  partielle  en   cours  de  construction.  Elle  choisit  enfin  la
 *séquence  qui  augmente  le  moins  la  durée  de  l’ordonnancement  partiel  formé  par  les  jobs  déjà placés.
 */


 void heuristique_NEH(Job* jobs, Machine* machines, float** tab, int job, int machine)
{
    int i = 0, j = 0, k = 0, w = 0, a = 0, nbre_tableau = 0, b = 0, c = 0, d = 0, e = 0, z = 0, zz = 0, nb_job = 0, Best_k = 0, nbre_job = 0;
    float tmpf = 0, transit = 0, transit2 = 0, transit3 = 0, transit4 = 0, transit5 = 0, transit6 = 0, Cmax = 0, Cpmax = 0, somme_job_avant = 0, somme_job_apres = 0, difference_SJA_TR = 1, difference_SJA_TR_2 = 0;
    float jobs_range[job], jobs_range2[job], jobs_avant[job], jobs_avant3[job], jobs_avant4[job], jobs_apres3[job], jobs_apres4[job], jobs_apres[job], jobs_avant2[job], jobs_apres2[job];
    Job tmp, tmp2, m, m1, m2;
    Machine duree = machines[k];
    Liste *liste_job = initialisation();


        for(i = 0 ; i < job ; i++)
        {
            for(j = 0; j < machine; j++)
            {


                int index = ordre_decroissant(jobs, i, job, 0); // 0 car je trie en fonction des durées de la premiere machine
                tmp = jobs[i];
                jobs[i] = jobs[index];
                jobs[index] = tmp;
                jobs_range[i] = jobs[i].duree[j];


                Cpmax=999999;



                if(jobs[i].duree[j] <= duree.Si){
                    jobs_avant[i] = jobs[i].duree[j];
                    jobs_apres[i] = 0;
                }
                else{
                    jobs_apres[i] = jobs[i].duree[j];
                    jobs_avant[i] = 0;
                }

                if(jobs[i].duree[j] < duree.Si || jobs[i].duree[j] == duree.Si){
                        jobs_apres[i] = 0;
                        jobs_apres2[i] = 0;
                }
                if(jobs[i].duree[j] > duree.Si) jobs_avant[i] = 0;
                if(jobs[i].duree[j] > duree.Si) jobs_apres2[i] = 0;


                transit += jobs_avant[i];

                if(transit <= duree.Si) jobs_avant2[i] = jobs_avant[i];
                else jobs_apres2[i] = jobs_avant[i];


                transit2 += jobs_avant2[i];
                if(transit > duree.Si) jobs_avant2[i] = 0;

                if(transit2 <= duree.Si ){
                    difference_SJA_TR = duree.Si - transit2;

                }

                    transit3 += jobs_apres[i];
                    transit4 += jobs_apres2[i];


                if((difference_SJA_TR > 0) && (nombre_element_tableau(jobs_avant2) != 5)){
                        for(w = 0; w < sizeof(jobs_apres2)/sizeof(float); w++){
                            if(jobs_apres2[i] <= difference_SJA_TR) jobs_avant3[i] = jobs_apres2[i];
                            else{//if(jobs_apres2[i] > difference_SJA_TR) {
                                    jobs_avant3[i] = 0;
                                    jobs_apres3[i] = jobs_apres2[i];
                            }
                            if(difference_SJA_TR == 0) jobs_avant3[i] = 0;
                        }
                }

                 transit5 += jobs_avant3[i];

                 if(transit5 <= duree.Si ){
                    difference_SJA_TR_2 = duree.Si - transit5;

                }

               if(transit5 <= difference_SJA_TR_2){
                    jobs_avant4[i] = jobs_avant3[i];
               }
               else{

                    jobs_apres4[i] = jobs_avant3[i];
               }

               transit6 += jobs_avant4[i];

                if(difference_SJA_TR == 0 || cinq0_tableau(jobs_avant2)){
                    Cmax = duree.Ti + transit3 + transit4;
                }
                if((difference_SJA_TR > 0) && (nombre_element_tableau(jobs_avant2) == 5)){
                    Cmax = transit; //;duree.Ti;
                }
                if((difference_SJA_TR > 0) && (nombre_element_tableau(jobs_avant2) != 5)){
                    Cmax = duree.Ti + transit3 + transit4 - transit6;
                }
                if(Cmax < Cpmax) Cpmax = Cmax;

               /* printf("JOB_APRES: APRES APRES APRES %.2f \n",jobs_apres[i]);
                printf("JOB_APRES3: APRES3 APRES3  %.2f \n",jobs_apres3[i]);
                printf("JOB_APRES4: APRES4 %.2f \n",jobs_apres4[i]);
                printf("JOB_AVANT4:XXXXXXXXX %.2f \n",jobs_avant4[i]);
                printf("JOB_AVANT2: %.2f \n",jobs_avant2[i]);*/



            }
        }
      /* for(a = 0; a < sizeof(jobs_apres)/sizeof(float); a++)
        {
            if(jobs_apres[a] != 0 && jobs_apres[a] < 30 && jobs_apres[a] > 0) insertion(liste_job, jobs_apres[a]);
        }

        for(b = 0; b < sizeof(jobs_apres3)/sizeof(float); b++)
        {
            if(jobs_apres3[b] != 0 && jobs_apres3[b] < 30 && jobs_apres3[b] > 0) insertion(liste_job, jobs_apres3[b]);
        }

        for(c = 0; c < sizeof(jobs_apres4)/sizeof(float); c++)
        {
            if(jobs_apres4[c] != 0 && jobs_apres4[c] < 30 && jobs_apres4[c] > 0) insertion(liste_job, jobs_apres4[c]);
        }

        for(d = 0; d < sizeof(jobs_avant4)/sizeof(float); d++)
        {
            if(jobs_avant4[d] != 0 && jobs_avant4[d] < 30 && jobs_avant4[d] > 0) insertion(liste_job, jobs_avant4[c]);
        }

        for(e = 0; e < sizeof(jobs_avant2)/sizeof(float); e++)
        {
            if(jobs_avant2[e] != 0 && jobs_avant2[e] < 30 && jobs_avant2[e] > 0) insertion(liste_job, jobs_avant2[e]);
        }*/

        printf("Cpmax = %f \n", Cpmax);
        //afficherListe(liste_job);

}

/**
 * @brief allocfloat2
 * @param nb1 premiere dimension
 * @param nb2 deuxieme dimension
 * @return
 * Permet d'allouer de la mémoire pour un tableau a deux dimensions
 */
int **allocfloat2(int nb1, int nb2)
{
  int **p;
  int i;

  p = (int **) malloc(sizeof(int *) * nb1);
  if(p == NULL) {
    fprintf(stderr,"erreur malloc 2\n");
    exit(EXIT_FAILURE);
  }

  for(i=0;i<nb1;i++) {
    p[i] = malloc(sizeof(Horaire) * nb2);
    if(p[i] == NULL) {
      fprintf(stderr,"erreur malloc 3\n");
      exit(EXIT_FAILURE);
    }
  }
  return(p);
}




int main(){


    Horaire** tab = allocfloat2(m,j*2);
    Job* jobs = malloc(j*sizeof(Job));
    Machine* machines = malloc(m*sizeof(Machine));

    srand(time(NULL));

    //instanciation
    int i,k;

    for (i = 1 ; i <= j ; i++){  // instanciation jobs
        Job jo ;
        jo.id = i;
        jo.duree = malloc(sizeof(int)*m);
        for(k = 0 ; k < m ; k++){ // instanciations durées pour chaque job
            jo.duree[k] = rand()%(10-1)+1;
        }
        jobs[i-1] = jo;
    }

    for (i = 1 ; i <= m ; i++){ //instanciation machine
        Machine machine ;
        machine.id = i;
        machine.Si = rand()%(20-1)+1;
        machine.Ti = rand()%(20-(int)(machine.Si+1))+(int)(machine.Si+1);
        machines[i-1]= machine ;
    }


   affichage(jobs, machines, j , m);


    heuristique_NEH(jobs, machines,tab,j,m);
    affichage(jobs, machines, j , m);



    for (i = 0 ; i < j ; i++){
        free(jobs[i].duree);
    }

    free(jobs);
    free(machines);
    return 0;


}

